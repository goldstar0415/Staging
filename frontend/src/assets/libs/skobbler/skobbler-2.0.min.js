!function e(t, a, o) {
    function n(r, s) {
        if (!a[r]) {
            if (!t[r]) {
                var l = "function" == typeof require && require;
                if (!s && l)return l(r, !0);
                if (i)return i(r, !0);
                var c = new Error("Cannot find module '" + r + "'");
                throw c.code = "MODULE_NOT_FOUND", c
            }
            var p = a[r] = {exports: {}};
            t[r][0].call(p.exports, function (e) {
                var a = t[r][1][e];
                return n(a ? a : e)
            }, p, p.exports, e, t, a, o)
        }
        return a[r].exports
    }

    for (var i = "function" == typeof require && require, r = 0; r < o.length; r++)n(o[r]);
    return n
}({
    1: [function (e, t, a) {
        window.L.Icon.Default.imagePath = ("undefined" != typeof JS_basehref ? JS_basehref : "https://www.skobbler.com/") + "images", L.skobbler = t.exports = {
            config: e("./src/config"),
            map: e("./src/map")
        }
    }, {"./src/config": 2, "./src/map": 3}], 2: [function (e, t, a) {
        "use strict";
        t.exports = {
            VERSION: "2.0",
            TILE_URL: "https://tiles{s}-{API_KEY}." + ("undefined" != typeof JS_tileserver_host ? JS_tileserver_host : "skobblermaps.com") + "/TileService/tiles/2.0/{MAP_OPTIONS}/{MAP_STYLE}/{z}/{x}/{y}.png{SCALE_FACTOR}",
            REALREACH_URL: "https://{API_KEY}.tor.skobbler.net/tor/RSngx/RealReach/json/18_0/en/{API_KEY}"
        }
    }, {}], 3: [function (e, t, a) {
        "use strict";
        var o = e("./config"), n = L.Map.extend({
            options: {
                apiKey: "",
                mapStyle: "day",
                bicycleLanes: !0,
                onewayArrows: !0,
                pois: "all",
                primaryLanguage: "en",
                fallbackLanguage: "en",
                mapLabels: "localNaming",
                retinaDisplay: "auto",
                zoomControl: !0,
                zoomControlPosition: "top-left",
                geolocation: !0,
                geolocationPosition: "bottom-left",
                fullscreen: !1,
                center: [],
                zoom: ""
            }, initialize: function (e, t) {
                L.Util.setOptions(this, t), L.Map.prototype.initialize.call(this, e, t);
                var a = new L.TileLayer(this._getURL(), {
                    subdomains: [1, 2, 3, 4],
                    detectRetina: !1,
                    attribution: '<a href="http://developer.skobbler.com/" target="_blank">Scout</a>, <a href="http://www.leafletjs.com" target="_blank">Leaflet</a>, <a href="http://www.openstreetmap.org" target="_blank">OpenStreetMap</a>'
                });
                this.addLayer(a), "undefined" != typeof this.attributionControl && this.attributionControl.setPrefix(!1), this._handleZoomControl(this.options.zoomControl, this.options.zoomControlPosition.split("-").join("")), this.options.fullscreen && this._initFullscreen(e)
            }, _initFullscreen: function (e) {
                var t = this;
                $("<div/>", {"class": "skobbler-fullscreen leaflet-control"}).appendTo(".leaflet-bottom.leaflet-left"), L.DomEvent.disableClickPropagation(document.getElementsByClassName("skobbler-fullscreen leaflet-control")[0]), $("<a/>", {href: "#"}).on("click", function (a) {
                    a.preventDefault(), t._fullscreen(e)
                }).prependTo(".skobbler-fullscreen")
            }, _fullscreen: function (e) {
                var t = $("#" + e);
                t.hasClass("skobbler-map-fullscreen") ? t.removeClass("skobbler-map-fullscreen") : t.addClass("skobbler-map-fullscreen"), this.invalidateSize()
            }, _getURL: function () {
                var e = (this.options.bicycleLanes ? "1" : "0") + (this.options.onewayArrows ? "1" : "0") + "0" + this._mapPois(this.options.pois) + this._mapLanguage(this.options.primaryLanguage) + this._mapLanguage(this.options.fallbackLanguage) + this._mapMapLabels(this.options.mapLabels) + "0", t = o.TILE_URL.replace("{API_KEY}", this.options.apiKey).replace("{MAP_OPTIONS}", e).replace("{MAP_STYLE}", this._mapMapStyle(this.options.mapStyle)).replace("{SCALE_FACTOR}", this._mapRetinaDisplay(this.options.retinaDisplay));
                return t
            }, _mapMapStyle: function (e) {
                switch (e) {
                    case"day":
                        e = "0";
                        break;
                    case"lite":
                        e = "7";
                        break;
                    case"night":
                        e = "2";
                        break;
                    case"bike":
                        e = "10";
                        break;
                    case"outdoor":
                        e = "5";
                        break;
                    default:
                        e = "0"
                }
                return e
            }, _mapPois: function (e) {
                switch (e) {
                    case"all":
                        e = "2";
                        break;
                    case"none":
                        e = "0";
                        break;
                    case"important":
                        e = "1";
                        break;
                    default:
                        e = "0"
                }
                return e
            }, _mapLanguage: function (e) {
                switch (e) {
                    case"en":
                        e = "1";
                        break;
                    case"de":
                        e = "2";
                        break;
                    case"fr":
                        e = "3";
                        break;
                    case"it":
                        e = "4";
                        break;
                    case"es":
                        e = "5";
                        break;
                    case"ru":
                        e = "6";
                        break;
                    default:
                        e = "1"
                }
                return e
            }, _mapMapLabels: function (e) {
                switch (e) {
                    case"localNaming":
                        e = "1010";
                        break;
                    case"transliterationOnly":
                        e = "3211";
                        break;
                    case"noTransliteration":
                        e = "3110";
                        break;
                    case"nativeLocalized":
                        e = "1321";
                        break;
                    case"transliterationNative":
                        e = "2320";
                        break;
                    default:
                        e = "1010"
                }
                return e
            }, _mapRetinaDisplay: function (e) {
                return "auto" == e ? window.devicePixelRatio && window.devicePixelRatio > 1 || L.Browser.retina ? "@2x" : "" : "yes" == e ? "@2x" : ""
            }, _handleZoomControl: function (e, t) {
                e && this.zoomControl.setPosition(t)
            }
        });
        t.exports = function (e, t) {
            return new n(e, t)
        }
    }, {"./config": 2}]
}, {}, [1]);
